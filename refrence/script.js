`use strict`;

// html elemnts
// start btn
const start = document.querySelector(`.start`);

// home btn
const back = document.querySelector(`.back`);

// text
const text = document.querySelector(`.text`);

// left side all contents
const left = document.querySelector(`.left`);

// right side all contents
const right = document.querySelector(`.right`);

// input box
const guessBox = document.querySelector(`.guess`);

// check btn
const checkButton = document.querySelector(`.check`);

// again btn
const again = document.querySelector(`.btn.again`);

// message
const message = document.querySelector(`.message`);

// attempts
const attempt = document.querySelector(`.attempt`);

// score
const highscore = document.querySelector(`.score`);

// secret number
const num = document.querySelector(`.number`);

// body
const body = document.querySelector(`body`);

// level buttons
const level = document.querySelectorAll(`.level`);

// all buttons
const buttons = document.querySelectorAll(`.btn`);

// how to play
// btn
const rule = document.querySelector(`.rules-btn`);

// rule window
const rulesBook = document.querySelector(`.rule-book`);

// close btn
const close = document.querySelector(`.close`);

const showRulesBook = false;

let tempHighscore = 0;

// to let the user know the level is selected or not
let levelSelected = false;

// store the number generated by system
let secretNum;

// start window to level window
const startBtn = () => {
  start.style.display = `none`;
  rule.style.display = `block`;
  back.style.display = `block`;
  text.style.display = `block`;
  level.forEach((level) => {
    level.style.display = `block`;
  });
};

start.addEventListener(`click`, startBtn);

// main window

// number generation
const generateNum = (lvl) => {
  secretNum = Math.floor(Math.random() * lvl);
};

// to set difficulty level based on user selection
const setDifficulty = (lvl) => {
  // to change the difficulty
  if (lvl == `easy`) {
    levelSelected = true;
    level.forEach((level) => {
      level.style.display = `none`;
    });
    text.style.display = `none`;
    right.style.display = `block`;
    guessBox.style.display = `block`;
    checkButton.style.display = `block`;
    again.style.display = `block`;
    guessBox.value = ``;
    // attempt
    attempt.textContent = 5;
    // hint message
    message.textContent = `Guess a number between 1 and 20`;
    // to change the difficulty to easy
    return 20;
  } else if (lvl == `medium`) {
    levelSelected = true;
    again.style.display = `block`;
    level.forEach((level) => {
      level.style.display = `none`;
    });
    text.style.display = `none`;
    right.style.display = `block`;
    guessBox.style.display = `block`;
    checkButton.style.display = `block`;
    guessBox.value = ``;
    // attempts
    attempt.textContent = 7;
    // hint message
    message.textContent = `Guess a number between 1 and 50`;
    // to change the difficulty to medium
    return 50;
  } else if (lvl == `hard`) {
    levelSelected = true;
    level.forEach((level) => {
      level.style.display = `none`;
    });
    text.style.display = `none`;
    right.style.display = `block`;
    guessBox.style.display = `block`;
    checkButton.style.display = `block`;
    again.style.display = `block`;
    guessBox.value = ``;
    // attempts
    attempt.textContent = 10;
    // hint message
    message.textContent = `Guess a number between 1 and 100`;
    // to change the difficulty to hard
    return 100;
  }
};


const lvlEvent = () => {
  let value;
  level.forEach((level) => {
    level.addEventListener(`click`, (event) => {
      // to target the buttons difficulty attribute
      let levels = event.target.getAttribute(`difficulty`);
      // to set the difficulty level
      value = setDifficulty(levels);
      console.log(value);
    });
  });
  return value;
};

generateNum(lvlEvent());


// store the system generated number
let newSecNum = secretNum;

// check the user entered number
const check = () => {
  // level is not selected
  if (levelSelected == false) {
    message.textContent = `ðŸ˜’Please select a level`;
  } else {
    // level is selected
    // user does not enter the number
    if (!guessBox.value) {
      message.textContent = `ðŸ˜•Please guess a number`;
    } else {
      // game logic

      //user entered number is too high
      if (guessBox.value > secretNum) {
        message.textContent = `Too High`;
        // attempts deduction
        if (attempt.textContent > 0) {
          attempt.textContent = score.textContent - 1;
        }
        if (attempt.textContent == 0) {
          message.textContent = `ðŸ˜¢You loose the game`;
          body.style.backgroundColor = `#f95959`;
          again.style.color = `#f95959`;
          checkButton.style.color = `#f95959`;
          num.style.color = `#f95959`;
          again.style.display = `block`;
          again.disabled = false;
        }
      }
      //user entered number is too low
      if (guessBox.value < secretNum) {
        message.textContent = `Too Low`;
        if (attempt.textContent > 0) {
          attempt.textContent = attempt.textContent - 1;
        }
        if (attempt.textContent == 0) {
          message.textContent = `ðŸ˜¢You loose the game`;
          body.style.backgroundColor = `#f95959`;
          again.style.color = `#f95959`;
          checkButton.style.color = `#f95959`;
          level.style.color = `#f95959`;
          num.style.color = `#f95959`;
          again.style.display = `block`;
        }
      }
      //user entered number is correct
      if (guessBox.value == secretNum) {
        message.textContent = `ðŸŽ‰Correct Guess`;
        body.style.backgroundColor = `#60b347`;
        num.textContent = secretNum;
        highscore.textContent = +5;
        tempHighscore = highattempt.textContent;
        again.style.display = `block`;
      }
    }
  }
};
checkButton.addEventListener(`click`, check);

// restart the game
const playAgain = () => {
  guessBox.value = ``;
  body.style.backgroundColor = `dodgerblue`;
  num.textContent = `?`;
  num.style.color = `dodgerblue`;
  attempt.textContent = 0;
  newSecNum = generateNum(lvlEvent());
  console.log(newSecNum);
  
  buttons.forEach((button) => {
    button.style.color = `dodgerblue`;
    button.addEventListener(`mouseover`, () => {
      button.style.color = `#F0FFFF`;
    });
    button.addEventListener(`mouseout`, () => {
      button.style.color = `dodgerblue`;
    });
  });
  num.addEventListener(`mouseover`, () => {
    num.style.color = `#F0FFFF`;
  });
  num.addEventListener(`mouseout`, () => {
    num.style.color = `dodgerblue`;
  });
  level.disabled = false;
};

again.addEventListener(`click`, playAgain);

// rules
const showRules = () => {
  rulesBook.style.display = `block`;
  buttons.disabled = true;
};

const closeRules = () => {
  rulesBook.style.display = `none`;
  buttons.disabled = false;
};

const closeTxt = () => {
  close.textContent = `x`;
};

const closeText = () => {
  close.textContent = `close`;
};

// show rules
rule.addEventListener(`click`, showRules);

// close rules
close.addEventListener(`click`, closeRules);

// close text
close.addEventListener(`mouseover`, closeTxt);

// close text
close.addEventListener(`mouseout`, closeText);
